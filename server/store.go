package server

import (
	"fmt"
	"strings"

	"github.com/jmoiron/sqlx"
	"github.com/korgottt/go-real-world-api/model"
	_ "github.com/lib/pq" // db driver
)

const schema = `
	CREATE TABLE IF NOT EXISTS users (
		id integer UNIQUE generated by default as identity,
		name text not null, 
		email text not null,
		password text not null,
		bio text DEFAULT '',
		image text DEFAULT ''
	);

	CREATE TABLE IF NOT EXISTS article (
		id integer generated by default as identity,
		slug text,
		title text
	);
`

const connStr = "user=postgres password=admin dbname=postgres sslmode=disable"

// ArticleDBStore is implementation of article store via Postgres
type ArticleDBStore struct {
	db *sqlx.DB
}

// Init initializes connetion
func (s *ArticleDBStore) Init() (err error) {
	s.db, err = sqlx.Connect("postgres", connStr)
	s.db.MustExec(schema)
	return
}

// Close closes connetion
func (s *ArticleDBStore) Close() (err error) {
	var isConnected bool
	if isConnected, err = s.ensureConnection(); isConnected {
		err = s.db.Close()
	}
	return
}

func (s *ArticleDBStore) ensureConnection() (isConnected bool, e error) {
	isConnected = s.db != nil
	if !isConnected {
		e = fmt.Errorf("db connection is not initialized")
	}
	return
}

// GetArticle selects article from db by slug search value
func (s *ArticleDBStore) GetArticle(slug string) (article model.Article, e error) {
	var a model.Article
	e = s.db.Get(&a, "SELECT * FROM article WHERE slug=$1", slug)
	return a, e
}

// CreateArticle creates article in db
func (s *ArticleDBStore) CreateArticle(a model.SingleArticleWrap) (article model.Article, e error) {
	if isConnected, e := s.ensureConnection(); !isConnected {
		return article, e
	}
	a.Article.Slug = CreateSlug(a.Article.Title)
	_, err := s.db.Exec("INSERT INTO article (slug, title) VALUES ($1, $2)", a.Article.Slug, a.Article.Title)
	return a.Article, err
}

// CreateSlug creates article slug from title
func CreateSlug(title string) string {
	return strings.ToLower(strings.Join(strings.Fields(title), "-"))
}
