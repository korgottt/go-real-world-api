package server

import (
	"fmt"

	"github.com/jmoiron/sqlx"
	"github.com/korgottt/go-real-world-api/model"
	"github.com/korgottt/go-real-world-api/utils"
	_ "github.com/lib/pq" // db driver
)

const schema = `
	CREATE TABLE IF NOT EXISTS users (
		id integer UNIQUE generated by default as identity,
		name text not null, 
		email text not null,
		password text not null,
		bio text DEFAULT '',
		image text DEFAULT ''
	);

	CREATE TABLE IF NOT EXISTS article (
		id integer generated by default as identity,
		slug text,
		title text
	);
`

const ConnStr = "user=postgres password=admin dbname=postgres sslmode=disable"

// ArticleDBStore is implementation of article store via Postgres
type ArticleDBStore struct {
	db *sqlx.DB
}

// Init initializes connetion
func (s *ArticleDBStore) Init() (err error) {
	s.db, err = sqlx.Connect("postgres", ConnStr)
	s.db.MustExec(schema)
	return
}

// Close closes connetion
func (s *ArticleDBStore) Close() (err error) {
	var isConnected bool
	if isConnected, err = s.ensureConnection(); isConnected {
		err = s.db.Close()
	}
	return
}

func (s *ArticleDBStore) ensureConnection() (isConnected bool, err error) {
	isConnected = s.db != nil
	if !isConnected {
		err = fmt.Errorf("db connection is not initialized")
	}
	return
}

// GetArticle selects article from db by slug search value
func (s *ArticleDBStore) GetArticle(slug string) (article model.Article, e error) {
	var a model.Article
	e = s.db.Get(&a, "SELECT * FROM article WHERE slug=$1", slug)
	return a, e
}

// CreateArticle creates article in db
func (s *ArticleDBStore) CreateArticle(a model.SingleArticleWrap) (article model.Article, err error) {
	if isConnected, err := s.ensureConnection(); !isConnected {
		return article, err
	}
	a.Article.Slug = utils.CreateSlug(a.Article.Title)
	_, err = s.db.Exec("INSERT INTO article (slug, title) VALUES ($1, $2)", a.Article.Slug, a.Article.Title)
	return a.Article, err
}

//GetUser return curent user information
func (s *ArticleDBStore) GetUser(name string) (user model.User, err error) {
	if isConnected, err := s.ensureConnection(); !isConnected {
		return model.User{}, err
	}
	err = s.db.Get(&user, "SELECT * FROM users WHERE name=$1", name)
	return user, err
}

//RegUser create new user in db
func (s *ArticleDBStore) RegUser(data model.User) (model.User, error) {
	if isConnected, err := s.ensureConnection(); !isConnected {
		return model.User{}, err
	}
	_, err := s.db.Exec("INSERT INTO users (name, password, email, bio, image) VALUES ($1, $2, $3, $4, $5)",
		data.UserName, data.Password, data.Email, data.Bio, data.Image)
	return data, err
}

//UpdateUser update user info by user name
func (s *ArticleDBStore) UpdateUser(username string, data model.SingleUserWrap) (model.SingleUserWrap, error) {
	_, err := s.db.Exec("UPDATE users SET username=$1, password=$2, email=$3, bio=$4, image=$5 WHERE username=$6",
		data.User.UserName, data.User.Password, data.User.Email, data.User.Bio, data.User.Image, username)
	return data, err
}
